// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using coreAPI_banking_app.Models;

#nullable disable

namespace coreAPI_banking_app.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250630110318_RecreateClientsTable")]
    partial class RecreateClientsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("coreAPI_banking_app.Models.Client", b =>
                {
                    b.Property<int>("Clientid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Clientid"));

                    b.Property<string>("Accounttype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("accounttype");

                    b.Property<string>("Contactnumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("contactnumber");

                    b.Property<DateTime?>("Createdon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdon")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fullname");

                    b.HasKey("Clientid")
                        .HasName("clients_pkey");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Instrument", b =>
                {
                    b.Property<int>("Instrumentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("instrumentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Instrumentid"));

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<string>("Market")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("market");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Tickersymbol")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tickersymbol");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Instrumentid")
                        .HasName("instruments_pkey");

                    b.ToTable("instruments", (string)null);
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Portfolio", b =>
                {
                    b.Property<int>("Portfolioid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("portfolioid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Portfolioid"));

                    b.Property<decimal?>("Averagecost")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("averagecost");

                    b.Property<int?>("Clientid")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<int?>("Instrumentid")
                        .HasColumnType("integer")
                        .HasColumnName("instrumentid");

                    b.Property<DateTime?>("Lastupdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastupdated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Quantityheld")
                        .HasColumnType("integer")
                        .HasColumnName("quantityheld");

                    b.HasKey("Portfolioid")
                        .HasName("portfolios_pkey");

                    b.HasIndex("Clientid");

                    b.HasIndex("Instrumentid");

                    b.ToTable("portfolios", (string)null);
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Trade", b =>
                {
                    b.Property<int>("Tradeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tradeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tradeid"));

                    b.Property<string>("Brokername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brokername");

                    b.Property<int?>("Clientid")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<int?>("Instrumentid")
                        .HasColumnType("integer")
                        .HasColumnName("instrumentid");

                    b.Property<decimal?>("Priceperunit")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("priceperunit");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly?>("Settlementdate")
                        .HasColumnType("date")
                        .HasColumnName("settlementdate");

                    b.Property<DateOnly?>("Tradedate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("tradedate")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Tradestatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tradestatus")
                        .HasDefaultValueSql("'PENDING'::character varying");

                    b.Property<string>("Tradetype")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tradetype");

                    b.HasKey("Tradeid")
                        .HasName("trades_pkey");

                    b.HasIndex("Clientid");

                    b.HasIndex("Instrumentid");

                    b.ToTable("trades", (string)null);
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Portfolio", b =>
                {
                    b.HasOne("coreAPI_banking_app.Models.Client", "Client")
                        .WithMany("Portfolios")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("portfolios_clientid_fkey");

                    b.HasOne("coreAPI_banking_app.Models.Instrument", "Instrument")
                        .WithMany("Portfolios")
                        .HasForeignKey("Instrumentid")
                        .HasConstraintName("portfolios_instrumentid_fkey");

                    b.Navigation("Client");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Trade", b =>
                {
                    b.HasOne("coreAPI_banking_app.Models.Client", "Client")
                        .WithMany("Trades")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("trades_clientid_fkey");

                    b.HasOne("coreAPI_banking_app.Models.Instrument", "Instrument")
                        .WithMany("Trades")
                        .HasForeignKey("Instrumentid")
                        .HasConstraintName("trades_instrumentid_fkey");

                    b.Navigation("Client");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Client", b =>
                {
                    b.Navigation("Portfolios");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("coreAPI_banking_app.Models.Instrument", b =>
                {
                    b.Navigation("Portfolios");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
